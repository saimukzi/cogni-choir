"""Azure OpenAI Third-Party Service Integration.

This module provides the `AzureOpenAI` class for integrating with Azure OpenAI
services. It handles API key management, AI engine information, and response
generation using the Azure OpenAI API.
"""
import logging
import os

import openai

from .. import third_party
from .. import commons

class AzureOpenAI(third_party.ThirdPartyBase):
    """Integrates with Azure OpenAI services.

    This class extends `ThirdPartyBase` to provide specific implementations
    for interacting with Azure OpenAI. It defines the necessary API key slots,
    AI engine configurations (like deployment names), and handles the
    communication with the Azure OpenAI API to generate chat responses.
    """

    def __init__(self):
        super().__init__("AzureOpenAI")
        self._logger = logging.getLogger(__name__ + ".AzureOpenAI")
        self._logger.info("Initializing AzureOpenAI.")
        self._client_dict = {}

    def get_thirdpartyapikey_slot_info_list(self) -> list[third_party.ThirdPartyApiKeySlotInfo]:
        """Gets the API key slot information required for Azure OpenAI.

        Returns:
            list[third_party.ThirdPartyApiKeySlotInfo]: A list containing information
                about the 'azure_openai' API key slot.
        """
        return [
            third_party.ThirdPartyApiKeySlotInfo(
                thirdpartyapikey_slot_id="azure_openai",
                name="Azure OpenAI"
            )
        ]

    def get_aiengine_info_list(self) -> list[third_party.AIEngineInfo]:
        """Gets the AI engine information for Azure OpenAI.

        Defines the 'azure_openai' engine, including its required arguments
        like 'deployment_name' (deployment name) and 'system_prompt'.

        Returns:
            list[third_party.AIEngineInfo]: A list containing information
                about the 'azure_openai' AI engine.
        """
        return [
            third_party.AIEngineInfo(
                aiengine_id="azure_openai",
                name="Azure OpenAI",
                thirdpartyapikey_slot_id_list=["azure_openai"],
                arg_list=[
                    third_party.AIEngineArgInfo(
                        arg_id="deployment_name",
                        name="Deployment Name",
                        required=True,
                        ),
                    third_party.AIEngineArgInfo(
                        arg_id="system_prompt",
                        name="System Prompt",
                        arg_type=third_party.AIEngineArgType.MULTI_LINE,
                        required=False,
                    )
                ]
            )
        ]

    def generate_response(
        self,
        _aiengine_id: str,
        aiengine_arg_dict: dict[str, str],
        thirdpartyapikey_list: list[str],
        role_name: str,
        conversation_history: list[third_party.MessageData]
    ) -> str:
        """
        Generates a response from the Azure OpenAI engine.

        Constructs a message history compatible with the OpenAI API,
        sends a request to the specified deployment, and returns the
        generated text response. Handles various API errors.

        Args:
            _aiengine_id (str): The ID of the AI engine to use (unused, as
                this class handles a specific Azure OpenAI engine type).
            aiengine_arg_dict (dict[str, str]): Arguments for the AI engine,
                must include 'deployment_name' (deployment name) and optionally
                'system_prompt'.
            thirdpartyapikey_list (list[str]): List containing the Azure OpenAI API key.
                Expects exactly one key.
            role_name (str): The name of the assistant role in the conversation.
            conversation_history (list[third_party.Message]): A list of Message
                objects representing the current conversation history.
        
        Returns:
            str: The response generated by the AI engine, or an error message.
        """

        assert (len(thirdpartyapikey_list) == 1), "Azure OpenAI requires exactly one API key."
        assert (thirdpartyapikey_list[0] is not None), "Azure OpenAI API key cannot be None."

        deployment_name = aiengine_arg_dict["deployment_name"]
        system_prompt = aiengine_arg_dict.get("system_prompt", "")
        thirdpartyapikey = thirdpartyapikey_list[0]

        azure_endpoint = commons.read_str(os.path.join('tmp','azure_endpoint.txt')) # TODO
        api_version = '2024-12-01-preview' # TODO
        client = self._get_client(
            thirdpartyapikey=thirdpartyapikey,
            azure_endpoint=azure_endpoint,
            api_version=api_version
        )

        messages = [{"role": "system", "content": system_prompt}]
        for msg in conversation_history:
            if msg.sender == role_name:
                messages.append({"role": "assistant", "content": msg.content.strip()})
            else:
                # messages.append({"role": "user", "content": msg['text']})
                reuse_content = True
                if len(messages) <= 0:
                    reuse_content = False
                if reuse_content and len(messages) >= 1 and messages[-1]["role"] != "user":
                    reuse_content = False

                if reuse_content:
                    messages[-1]["content"] += '\n\n'
                else:
                    messages.append({"role": "user", "content": ""})
                messages[-1]["content"] += f'{msg.sender} said:\n{msg.content.strip()}'

        # Log the constructed messages list for debugging, if necessary (optional)
        # logging.debug(f"Constructed messages for Azure OpenAI: {messages}")

        try:
            response = client.chat.completions.create(
                model=deployment_name,
                messages=messages
            )
            if response.choices and len(response.choices) > 0:
                generated_text = response.choices[0].message.content.strip()
                # Log the successful generation, possibly with a summary of input if not too verbose
                logging.info(f"Successfully generated response from Azure OpenAI for role {role_name}.")
                return generated_text
            else:
                logging.error(f"No response choices found from Azure OpenAI for role {role_name}.")
                return "Error: No response generated."
        except openai.APIConnectionError as e:
            logging.error(f"Azure OpenAI API connection error for role {role_name}: {e}")
            return f"Error: Could not connect to Azure OpenAI API. Details: {e}"
        except openai.RateLimitError as e:
            logging.error(f"Azure OpenAI API rate limit exceeded for role {role_name}: {e}")
            return f"Error: Azure OpenAI API rate limit exceeded. Details: {e}"
        except openai.AuthenticationError as e:
            logging.error(f"Azure OpenAI API authentication error for role {role_name}: {e}")
            return f"Error: Azure OpenAI API authentication failed. Please check your API key and endpoint. Details: {e}"
        except openai.APIError as e:
            logging.error(f"Azure OpenAI API error for role {role_name}: {e}")
            return f"Error: An unexpected error occurred with the Azure OpenAI API. Details: {e}"
        except Exception as e:
            logging.error(f"An unexpected error occurred for role {role_name}: {e}")
            return f"Error: An unexpected error occurred. Details: {e}"

    def _get_client(self, thirdpartyapikey: str, azure_endpoint: str, api_version: str) -> openai.AzureOpenAI:
        """Retrieves or creates an AzureOpenAI client.

        Manages a dictionary of client instances, keyed by a tuple of
        (thirdpartyapikey, azure_endpoint, api_version), to reuse clients if possible.

        Args:
            thirdpartyapikey (str): The Azure OpenAI API key.
            azure_endpoint (str): The Azure endpoint URL for the OpenAI service.
            api_version (str): The API version to use (e.g., '2024-12-01-preview').

        Returns:
            openai.AzureOpenAI: An initialized AzureOpenAI client instance.
        """
        client_key = (thirdpartyapikey, azure_endpoint, api_version)
        if client_key not in self._client_dict:
            client = openai.AzureOpenAI(
                api_key=thirdpartyapikey,
                azure_endpoint=azure_endpoint,
                api_version=api_version,
            )
            self._client_dict[client_key] = client
        return self._client_dict[client_key]
