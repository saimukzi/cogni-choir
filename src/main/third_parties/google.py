"""
Google Third-Party Service Integration
"""
import logging

from google import genai # google.genai from python package google-genai
# google.generativeai is deprecated.  It MUST NOT be used.
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch

from .. import third_party

DEFAULT_MODEL_NAME = "gemini-2.0-flash"

class Google(third_party.ThirdPartyBase):
    """
    Google class that extends ThirdPartyBase.
    
    This class represents a third-party service for explainable AI functionalities.
    It provides methods to retrieve API key slot information and AI engine information.
    """

    def __init__(self):
        super().__init__("Google")
        self._logger = logging.getLogger(__name__ + ".Google")
        self._logger.info("Initializing Third party Google.")
        self._apikey_to_client_dict = {}
        self._tools = [Tool(google_search = GoogleSearch())]

    def get_apikey_slot_info_list(self) -> list[third_party.ApiKeySlotInfo]:
        return [
            third_party.ApiKeySlotInfo(
                apikey_slot_id="google_gemini",
                name="Google Gemini"
            )
        ]

    def get_aiengine_info_list(self) -> list[third_party.AIEngineInfo]:
        return [
            third_party.AIEngineInfo(
                aiengine_id="google_gemini",
                name="Google Gemini",
                apikey_slot_id_list=["google_gemini"],
                arg_list=[
                    third_party.AIEngineArgInfo(
                        arg_id="model_name",
                        name="Model Name",
                        required=True,
                        default_value=DEFAULT_MODEL_NAME,
                        ),
                    third_party.AIEngineArgInfo(
                        arg_id="system_prompt",
                        name="System Prompt",
                        required=False,
                    )
                ]
            )
        ]

    def generate_response(
        self,
        _aiengine_id: str,
        aiengine_arg_dict: dict[str, str],
        apikey_list: list[str],
        role_name: str,
        conversation_history: list[third_party.Message]
    ) -> str:
        """
        Generates a response from the AI engine.
        
        Args:
            aiengine_id (str): The ID of the AI engine to use.
            aiengine_args (dict[str, str]): Arguments for the AI engine.
            apikey_list (list[str]): List of API keys for authentication.
            role_name (str): The name of the role for the AI.
            conversation_history (list[Message]): A list representing the current conversation history.
        
        Returns:
            str: The response generated by the AI engine.
        """

        assert (len(apikey_list) == 1), "Requires exactly one API key."

        model_name = aiengine_arg_dict.get("model_name", DEFAULT_MODEL_NAME)
        system_prompt = aiengine_arg_dict.get("system_prompt", "")
        apikey = apikey_list[0]

        client = self._get_client(apikey)

        system_instruction = system_prompt.strip()

        contents = []
        for msg in conversation_history:
            sender_role = msg.sender
            text_content = msg.content.strip()
            if sender_role == role_name:
                contents.append({"role": "model", "text": text_content})
            else:
                reuse_content = True
                if len(contents) <= 0:
                    reuse_content = False
                if reuse_content and len(contents) >= 1 and contents[-1]["role"] == "model":
                    reuse_content = False

                if reuse_content:
                    text = contents[-1]["text"]
                    text += f'\n\n{sender_role} said:\n{text_content}'
                    contents[-1]["text"] = text
                else:
                    text = f'{sender_role} said:\n{text_content}'
                    content = {"role": "user", "text": text}
                    contents.append(content)

        contents = map(
            lambda x: genai.types.Content(
                role=x['role'],
                parts=[genai.types.Part(text=x['text'])]
            ),
            contents
        )
        contents = list(contents)

        try:
            self._logger.debug(f"Sending request to Gemini API. System prompt (first 50 chars): '{system_prompt[:50]}...'")
            # chat = self.model.start_chat(history=gemini_history)
            # response = chat.send_message(current_user_prompt)
            response = client.models.generate_content(
                model=model_name,
                contents=contents,
                # systemInstruction=system_instruction,
                config=GenerateContentConfig(
                    system_instruction=system_instruction,
                    tools=self._tools,
                ),
            )
            # Check if response.text exists and is not empty, as per some API behaviors for safety/errors
            if hasattr(response, 'text') and response.text:
                self._logger.info("Successfully received response from Gemini API.")
                # self.logger.debug(f"Gemini response (first 100 chars): {response.text[:100]}..." )
                return response.text
            else:
                # This part handles cases where the response object might not have 'text' or it's empty
                # or if there's a non-exception error indicated by the response structure.
                # Attempt to find more specific error information if available.
                error_details = "Unknown error: Response structure was not as expected or text was empty."
                if hasattr(response, 'prompt_feedback') and response.prompt_feedback:
                    error_details = f"Gemini API issue: Prompt feedback: {response.prompt_feedback}"
                self._logger.error(f"Gemini API call did not return expected text response. Details: {error_details}")
                return f"Error: Gemini API call failed or returned empty response. Details: {error_details}"

        except Exception as e:
            self._logger.error(f"Gemini API call failed: {str(e)}", exc_info=True)
            return f"Error: Gemini API call failed: {str(e)}"

    def _get_client(self, apikey: str) -> genai.Client:
        """
        Retrieves or creates an OpenAI client for the given API key.
        
        Args:
            apikey (str): The API key to use for authentication.
        
        Returns:
            openai.OpenAI: An OpenAI client instance.
        """
        if apikey not in self._apikey_to_client_dict:
            client = genai.Client(api_key=apikey)
            self._apikey_to_client_dict[apikey] = client
        return self._apikey_to_client_dict[apikey]
