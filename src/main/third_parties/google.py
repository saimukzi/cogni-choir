"""
Google Third-Party Service Integration
"""
import logging

from google import genai # google.genai from python package google-genai
# google.generativeai is deprecated.  It MUST NOT be used.
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch

from .. import third_party

DEFAULT_MODEL_NAME = "gemini-2.0-flash"
MODEL_NAME_LIST = [
    'gemini-2.0-flash',
    'gemini-2.0-flash-lite',
    'gemini-1.5-flash',
    'gemini-1.5-flash-8b',
    'gemini-1.5-pro',
]

class Google(third_party.ThirdPartyBase):
    """Integrates with Google's Generative AI services (e.g., Gemini).

    This class extends `ThirdPartyBase` to provide specific implementations
    for interacting with Google's AI models. It defines the necessary API key
    slots, AI engine configurations, and handles communication with the
    Google GenAI API to generate chat responses.
    """

    def __init__(self):
        super().__init__("Google")
        self._logger = logging.getLogger(__name__ + ".Google")
        self._logger.info("Initializing Third party Google.")
        self._thirdpartyapikey_to_client_dict = {}
        self._tools = [Tool(google_search = GoogleSearch())]

    def get_thirdpartyapikey_slot_info_list(self) -> list[third_party.ThirdPartyApiKeySlotInfo]:
        """Gets the API key slot information required for Google's AI services.

        Returns:
            list[third_party.ThirdPartyApiKeySlotInfo]: A list containing information
                about the 'google_gemini' API key slot.
        """
        return [
            third_party.ThirdPartyApiKeySlotInfo(
                thirdpartyapikey_slot_id="google_gemini",
                name="Google Gemini"
            )
        ]

    def get_aiengine_info_list(self) -> list[third_party.AIEngineInfo]:
        """Gets the AI engine information for Google's AI services.

        Defines the 'google_gemini' engine, including its required arguments
        like 'model_name' and 'system_prompt'.

        Returns:
            list[third_party.AIEngineInfo]: A list containing information
                about the 'google_gemini' AI engine.
        """
        return [
            third_party.AIEngineInfo(
                aiengine_id="google_gemini",
                name="Google Gemini",
                thirdpartyapikey_slot_id_list=["google_gemini"],
                arg_list=[
                    third_party.AIEngineArgInfo(
                        arg_id="model_name",
                        name="Model Name",
                        arg_type=third_party.AIEngineArgType.SUGGESTION,
                        value_option_list=MODEL_NAME_LIST,
                        required=True,
                        default_value=DEFAULT_MODEL_NAME,
                    ),
                    third_party.AIEngineArgInfo(
                        arg_id="enable_google_search",
                        name="Enable Google Search",
                        arg_type=third_party.AIEngineArgType.SELECTION,
                        value_option_list=['Yes', 'No'],
                        required=True,
                        default_value='No',
                    ),
                    third_party.AIEngineArgInfo(
                        arg_id="system_prompt",
                        name="System Prompt",
                        arg_type=third_party.AIEngineArgType.MULTI_LINE,
                        required=False,
                    )
                ]
            )
        ]

    def generate_response(
        self,
        _aiengine_id: str,
        aiengine_arg_dict: dict[str, str],
        thirdpartyapikey_list: list[str],
        role_name: str,
        conversation_history: list[third_party.Message]
    ) -> str:
        """
        Generates a response from the Google Gemini engine.

        Constructs a message history compatible with the Google GenAI API,
        sends a request to the specified model, and returns the generated
        text response. Handles potential API errors.

        Args:
            _aiengine_id (str): The ID of the AI engine to use (unused, as this
                class primarily handles the 'google_gemini' engine type).
            aiengine_arg_dict (dict[str, str]): Arguments for the AI engine,
                should include 'model_name' and optionally 'system_prompt'.
            thirdpartyapikey_list (list[str]): List containing the Google API key.
                Expects exactly one key.
            role_name (str): The name of the assistant role in the conversation.
            conversation_history (list[third_party.Message]): A list of Message
                objects representing the current conversation history.
        
        Returns:
            str: The response generated by the AI engine, or an error message.
        """

        assert (len(thirdpartyapikey_list) == 1), "Requires exactly one API key."

        model_name = aiengine_arg_dict.get("model_name", DEFAULT_MODEL_NAME)
        system_prompt = aiengine_arg_dict.get("system_prompt", "")
        thirdpartyapikey = thirdpartyapikey_list[0]

        client = self._get_client(thirdpartyapikey)

        system_instruction = system_prompt.strip()

        contents = []
        for msg in conversation_history:
            sender_role = msg.sender
            text_content = msg.content.strip()
            if sender_role == role_name:
                contents.append({"role": "model", "text": text_content})
            else:
                reuse_content = True
                if len(contents) <= 0:
                    reuse_content = False
                if reuse_content and len(contents) >= 1 and contents[-1]["role"] == "model":
                    reuse_content = False

                if reuse_content:
                    text = contents[-1]["text"]
                    text += f'\n\n{sender_role} said:\n{text_content}'
                    contents[-1]["text"] = text
                else:
                    text = f'{sender_role} said:\n{text_content}'
                    content = {"role": "user", "text": text}
                    contents.append(content)

        contents = map(
            lambda x: genai.types.Content(
                role=x['role'],
                parts=[genai.types.Part(text=x['text'])]
            ),
            contents
        )
        contents = list(contents)

        try:
            self._logger.debug(f"Sending request to Gemini API. System prompt (first 50 chars): '{system_prompt[:50]}...'")
            # chat = self.model.start_chat(history=gemini_history)
            # response = chat.send_message(current_user_prompt)
            response = client.models.generate_content(
                model=model_name,
                contents=contents,
                # systemInstruction=system_instruction,
                config=GenerateContentConfig(
                    system_instruction=system_instruction,
                    tools=self._tools,
                ),
            )
            # Check if response.text exists and is not empty, as per some API behaviors for safety/errors
            if hasattr(response, 'text') and response.text:
                self._logger.info("Successfully received response from Gemini API.")
                # self.logger.debug(f"Gemini response (first 100 chars): {response.text[:100]}..." )
                return response.text
            else:
                # This part handles cases where the response object might not have 'text' or it's empty
                # or if there's a non-exception error indicated by the response structure.
                # Attempt to find more specific error information if available.
                error_details = "Unknown error: Response structure was not as expected or text was empty."
                if hasattr(response, 'prompt_feedback') and response.prompt_feedback:
                    error_details = f"Gemini API issue: Prompt feedback: {response.prompt_feedback}"
                self._logger.error(f"Gemini API call did not return expected text response. Details: {error_details}")
                return f"Error: Gemini API call failed or returned empty response. Details: {error_details}"

        except Exception as e:
            self._logger.error(f"Gemini API call failed: {str(e)}", exc_info=True)
            return f"Error: Gemini API call failed: {str(e)}"

    def _get_client(self, thirdpartyapikey: str) -> genai.Client:
        """Retrieves or creates a Google GenAI client.

        Manages a dictionary of client instances, keyed by API key,
        to reuse clients when possible.

        Args:
            thirdpartyapikey (str): The Google API key.

        Returns:
            genai.Client: An initialized Google GenAI client instance.
        """
        if thirdpartyapikey not in self._thirdpartyapikey_to_client_dict:
            client = genai.Client(api_key=thirdpartyapikey)
            self._thirdpartyapikey_to_client_dict[thirdpartyapikey] = client
        return self._thirdpartyapikey_to_client_dict[thirdpartyapikey]
