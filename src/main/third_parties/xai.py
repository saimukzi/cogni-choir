"""
xAI Third-Party Service Integration
"""
import logging
import openai
from .. import third_party

class XAI(third_party.ThirdPartyBase):
    """
    xAI class that extends ThirdPartyBase.
    
    This class represents a third-party service for explainable AI functionalities.
    It provides methods to retrieve API key slot information and AI engine information.
    """

    def __init__(self):
        super().__init__("XAI")
        self._logger = logging.getLogger(__name__ + ".XAI")
        self._logger.info("Initializing XAI.")
        self._apikey_to_client_dict = {}

    def get_apikey_slot_info_list(self) -> list[third_party.ApiKeySlotInfo]:
        return [
            third_party.ApiKeySlotInfo(
                apikey_slot_id="xai_grok",
                name="xAI Grok"
            )
        ]

    def get_aiengine_info_list(self) -> list[third_party.AIEngineInfo]:
        return [
            third_party.AIEngineInfo(
                aiengine_id="xai_grok",
                name="xAI Grok",
                apikey_slot_id_list=["xai_grok"],
                arg_list=[
                    third_party.AIEngineArgInfo(
                        arg_id="model_name",
                        name="Model Name",
                        required=True,
                        default_value="grok-3-latest",
                        ),
                    third_party.AIEngineArgInfo(
                        arg_id="system_prompt",
                        name="System Prompt",
                        required=False,
                    )
                ]
            )
        ]

    def generate_response(
        self,
        _aiengine_id: str,
        aiengine_arg_dict: dict[str, str],
        apikey_list: list[str],
        role_name: str,
        conversation_history: list[third_party.Message]
    ) -> str:
        """
        Generates a response from the AI engine.
        
        Args:
            aiengine_id (str): The ID of the AI engine to use.
            aiengine_args (dict[str, str]): Arguments for the AI engine.
            apikey_list (list[str]): List of API keys for authentication.
            role_name (str): The name of the role for the AI.
            conversation_history (list[Message]): A list representing the current conversation history.
        
        Returns:
            str: The response generated by the AI engine.
        """

        assert (len(apikey_list) == 1), "XAI requires exactly one API key."

        model_name = aiengine_arg_dict.get("model_name", "grok-3-latest")
        system_prompt = aiengine_arg_dict.get("system_prompt", "")
        apikey = apikey_list[0]

        client = self._get_client(apikey)

        messages = [{"role": "system", "content": system_prompt}]
        for msg in conversation_history:
            if msg.sender == role_name:
                messages.append({"role": "assistant", "content": msg.content.strip()})
            else:
                messages.append({"role": "user", "content": f'{msg.sender} said:\n{msg.content.strip()}'})

        try:
            response = client.chat.completions.create(
                model=model_name,
                messages=messages
            )
            if response.choices and len(response.choices) > 0:
                generated_text = response.choices[0].message.content.strip()
                # Log the successful generation, possibly with a summary of input if not too verbose
                logging.info(f"Successfully generated response from Grok for role {role_name}.")
                return generated_text
            else:
                logging.error(f"No response choices found from Grok for role {role_name}.")
                return "Error: No response generated."
        except openai.APIConnectionError as e:
            logging.error(f"Grok API connection error for role {role_name}: {e}")
            return f"Error: Could not connect to Grok API. Details: {e}"
        except openai.RateLimitError as e:
            logging.error(f"Grok API rate limit exceeded for role {role_name}: {e}")
            return f"Error: Grok API rate limit exceeded. Details: {e}"
        except openai.AuthenticationError as e:
            logging.error(f"Grok API authentication error for role {role_name}: {e}")
            return f"Error: Grok API authentication failed. Please check your API key and endpoint. Details: {e}"
        except openai.APIError as e:
            logging.error(f"Grok API error for role {role_name}: {e}")
            return f"Error: An unexpected error occurred with the Grok API. Details: {e}"
        except Exception as e:
            logging.error(f"An unexpected error occurred for role {role_name}: {e}")
            return f"Error: An unexpected error occurred. Details: {e}"

    def _get_client(self, apikey: str) -> openai.OpenAI:
        """
        Retrieves or creates an OpenAI client for the given API key.
        
        Args:
            apikey (str): The API key to use for authentication.
        
        Returns:
            openai.OpenAI: An OpenAI client instance.
        """
        if apikey not in self._apikey_to_client_dict:
            client = openai.OpenAI(
                api_key=apikey,
                base_url="https://api.x.ai/v1",
            )
            self._apikey_to_client_dict[apikey] = client
        return self._apikey_to_client_dict[apikey]
