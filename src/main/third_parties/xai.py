"""
xAI Third-Party Service Integration
"""
import logging
import openai
from .. import third_party

DEFAULT_MODEL_NAME = "grok-3-latest"
MODEL_NAME_LIST = [
    'grok-3-latest',
    'grok-3-fast-latest',
    'grok-3-mini-latest',
    'grok-3-mini-fast-latest',
    'grok-2',
    'grok-2-latest',
]

class XAI(third_party.ThirdPartyBase):
    """Integrates with xAI's services (e.g., Grok).

    This class extends `ThirdPartyBase` to provide specific implementations
    for interacting with xAI's models. It defines the necessary API key
    slots, AI engine configurations, and handles communication with the
    xAI API (which is OpenAI-compatible) to generate chat responses.
    """

    def __init__(self):
        super().__init__("XAI")
        self._logger = logging.getLogger(__name__ + ".XAI")
        self._logger.info("Initializing XAI.")
        self._thirdpartyapikey_to_client_dict = {}

    def get_thirdpartyapikey_slot_info_list(self) -> list[third_party.ThirdPartyApiKeySlotInfo]:
        """Gets the API key slot information required for xAI's services.

        Returns:
            list[third_party.ThirdPartyApiKeySlotInfo]: A list containing information
                about the 'xai_grok' API key slot.
        """
        return [
            third_party.ThirdPartyApiKeySlotInfo(
                thirdpartyapikey_slot_id="xai_grok",
                name="xAI Grok"
            )
        ]

    def get_aiengine_info_list(self) -> list[third_party.AIEngineInfo]:
        """Gets the AI engine information for xAI's services.

        Defines the 'xai_grok' engine, including its required arguments
        like 'model_name' and 'system_prompt'.

        Returns:
            list[third_party.AIEngineInfo]: A list containing information
                about the 'xai_grok' AI engine.
        """
        return [
            third_party.AIEngineInfo(
                aiengine_id="xai_grok",
                name="xAI Grok",
                thirdpartyapikey_slot_id_list=["xai_grok"],
                arg_list=[
                    third_party.AIEngineArgInfo(
                        arg_id="model_name",
                        name="Model Name",
                        arg_type=third_party.AIEngineArgType.SUGGESTION,
                        value_option_list=MODEL_NAME_LIST,
                        required=True,
                        default_value=DEFAULT_MODEL_NAME,
                        ),
                    third_party.AIEngineArgInfo(
                        arg_id="system_prompt",
                        name="System Prompt",
                        arg_type=third_party.AIEngineArgType.MULTI_LINE,
                        required=False,
                    )
                ]
            )
        ]

    def generate_response(
        self,
        _aiengine_id: str,
        aiengine_arg_dict: dict[str, str],
        thirdpartyapikey_list: list[str],
        role_name: str,
        conversation_history: list[third_party.Message]
    ) -> str:
        """
        Generates a response from the xAI Grok engine.

        Constructs a message history compatible with the OpenAI API format
        (which xAI uses), sends a request to the specified model, and returns
        the generated text response. Handles potential API errors.

        Args:
            _aiengine_id (str): The ID of the AI engine to use (unused, as this
                class primarily handles the 'xai_grok' engine type).
            aiengine_arg_dict (dict[str, str]): Arguments for the AI engine,
                should include 'model_name' and optionally 'system_prompt'.
            thirdpartyapikey_list (list[str]): List containing the xAI API key.
                Expects exactly one key.
            role_name (str): The name of the assistant role in the conversation.
            conversation_history (list[third_party.Message]): A list of Message
                objects representing the current conversation history.
        
        Returns:
            str: The response generated by the AI engine, or an error message.
        """

        assert (len(thirdpartyapikey_list) == 1), f"XAI requires exactly one API key, len={len(thirdpartyapikey_list)}."

        model_name = aiengine_arg_dict.get("model_name", DEFAULT_MODEL_NAME)
        system_prompt = aiengine_arg_dict.get("system_prompt", "")
        thirdpartyapikey = thirdpartyapikey_list[0]

        client = self._get_client(thirdpartyapikey)

        messages = [{"role": "system", "content": system_prompt}]
        for msg in conversation_history:
            if msg.sender == role_name:
                messages.append({"role": "assistant", "content": msg.content.strip()})
            else:
                messages.append({"role": "user", "content": f'{msg.sender} said:\n{msg.content.strip()}'})

        try:
            response = client.chat.completions.create(
                model=model_name,
                messages=messages
            )
            if response.choices and len(response.choices) > 0:
                generated_text = response.choices[0].message.content.strip()
                # Log the successful generation, possibly with a summary of input if not too verbose
                logging.info(f"Successfully generated response from Grok for role {role_name}.")
                return generated_text
            else:
                logging.error(f"No response choices found from Grok for role {role_name}.")
                return "Error: No response generated."
        except openai.APIConnectionError as e:
            logging.error(f"Grok API connection error for role {role_name}: {e}")
            return f"Error: Could not connect to Grok API. Details: {e}"
        except openai.RateLimitError as e:
            logging.error(f"Grok API rate limit exceeded for role {role_name}: {e}")
            return f"Error: Grok API rate limit exceeded. Details: {e}"
        except openai.AuthenticationError as e:
            logging.error(f"Grok API authentication error for role {role_name}: {e}")
            return f"Error: Grok API authentication failed. Please check your API key and endpoint. Details: {e}"
        except openai.APIError as e:
            logging.error(f"Grok API error for role {role_name}: {e}")
            return f"Error: An unexpected error occurred with the Grok API. Details: {e}"
        except Exception as e:
            logging.error(f"An unexpected error occurred for role {role_name}: {e}")
            return f"Error: An unexpected error occurred. Details: {e}"

    def _get_client(self, thirdpartyapikey: str) -> openai.OpenAI:
        """Retrieves or creates an OpenAI client configured for xAI.

        Manages a dictionary of client instances, keyed by API key,
        to reuse clients when possible. The client is configured with
        xAI's specific base URL.

        Args:
            thirdpartyapikey (str): The xAI API key.

        Returns:
            openai.OpenAI: An initialized OpenAI client instance configured for xAI.
        """
        if thirdpartyapikey not in self._thirdpartyapikey_to_client_dict:
            client = openai.OpenAI(
                api_key=thirdpartyapikey,
                base_url="https://api.x.ai/v1",
            )
            self._thirdpartyapikey_to_client_dict[thirdpartyapikey] = client
        return self._thirdpartyapikey_to_client_dict[thirdpartyapikey]
